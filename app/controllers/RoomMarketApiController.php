<?phpnamespace Vokuro\Controllers;use Models\UsersMobile;use Models\Content;use Phalcon\Builder\Controller;use Phalcon\Http\Request;use Phalcon\Paginator\Adapter\Model as Paginator;use Phalcon\Mvc\Model\Criteria;use Phalcon\Security;use Phalcon\Security\Random;use Phalcon\Mvc\Url;use Vokuro\Forms\AdvancedSearchForm;use Vokuro\Geo\Models\GeoCities;use Vokuro\Geo\Models\GeoCitiesLang;use Vokuro\Models\ProductExtraFields;use Vokuro\Offers\Models\Offers;use Vokuro\Pentavalue\Keyvalue;use Phalcon\Mvc\Model\QueryBuilder;use DataTables\DataTable;use Vokuro\Models\ResetPasswords;use Vokuro\UsersModule\Models\UserAddresses;use Vokuro\UsersModule\Models\UserData;use Vokuro\UsersModule\Models\UserTokens;use GuzzleHttp\Client;use GuzzleHttp\Psr7\Request as GuzzReq;class RoomMarketApiController extends ControllerApiBase{    const APPLICATION_ID = 1;    const URL = "http://penta-test.com/tanks_project/uploads/";    public function indexAction()    {        $this->view->disable();        $action = $_REQUEST['Action'];        if (isset($_REQUEST['lang'])) {            $lang_id = $_REQUEST['lang'];        } else {            $lang_id = 1;        }        $Application = \UsersApplication::findFirst(["ID=" . static::APPLICATION_ID]);        switch ($action) {            case "Specials":                $arr = array();                $data = array();                $depts = \DataCmsDeptsRel::find("Core_Depts_ID=4");                if (count($depts) < 1) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no departments at this time';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                foreach ($depts as $dept) {                    $data_row['Dept_ID'] = $dept->ID;                    $lang = $dept->getDeptRelLang(["lang_id={$lang_id}"]);                    if ($lang) {                        $data_row['Title'] = $lang->title;                        $data_row['Des'] = $dept->Des;                    } else {                        $data_row['Title'] = $dept->Title;                        $data_row['Des'] = $dept->Des;                    }                    $data_row['Img'] = static::URL . $dept->Img;                    $data[] = $data_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "orders":                $arr = array();                $data = array();                //get all orders                $Module_ID = 20171;                $orders = \DataCmsOrders::find(["Module_ID={$Module_ID}"]);                if (count($orders) < 1) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no orders at this time';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                foreach ($orders as $order) {                    $data_row['ID'] = $order->ID;                    $data_row['User_ID'] = $order->User_ID;                    $data_row['Order_Status'] = $order->Status;                    if (!$order->OrderStatus->getLang(["Lang_ID={$lang_id}"])) {                        $data_row['Order_Status_Name'] = $order->OrderStatus->Status_Name;                    } else {                        $data_row['Order_Status_Name'] = $order->OrderStatus->getLang(["Lang_ID={$lang_id}"])->Status_Title;                    }                    //$data_row['Order_Status_Name'] = $order->OrderStatus->Status_Name;                    foreach ($order->OrderPurchase as $order_info) {                        $data_product = array();                        $data_product['ID'] = $order_info->Data_Cms_ID;                        $data_product['Count'] = $order_info->Count;                        $langs = $order_info->Content->getLang(["lang_id={$lang_id}"]);                        if (count($langs) > 0) {                            foreach ($langs as $lang) {                                $data_product['Name'] = $lang->title;                            }                        } else {                            $data_product['Name'] = $order_info->Content->Title;                        }                        $data_row['Products'][] = $data_product;                    }                    $data[] = $data_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Categories":                // Get Product in Category                $arr = array();                $data = array();                $Module_ID = 8;                if (!isset($_GET["Dept_ID"])) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'Dept_ID is not set';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $dept_id = $this->request->getQuery('Dept_ID');                $products = \DataCmsDeptsRelItem::find(["Module_ID={$Module_ID} AND Depts_ID={$dept_id}"]);                if (count($products) < 1) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no products at this time';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $dept = \DataCmsDeptsRel::findfirst(["ID={$dept_id}"]);                $lang = $dept->getDeptRelLang(["lang_id={$lang_id}"]);                if ($lang) {                    $data['Department'] = array("ID" => $dept_id, "Name" => $lang->title, "Des" => $dept->Des);                } else {                    $data['Department'] = array("ID" => $dept_id, "Name" => $dept->Title, "Des" => $dept->Des);                }                foreach ($products as $product) {                    $product_row = array();                    $product_row['ID'] = $product->Content->ID;                    $langs = $product->Content->getLang(["lang_id={$lang_id}"]);                    if (count($langs) > 0) {                        foreach ($langs as $lang) {                            $product_row['Title'] = $lang->title;                            $product_row['Desc'] = $lang->des;                            $product_row['Details'] = $lang->content;                        }                    } else {                        $product_row['Title'] = $product->Content->Title;                        $product_row['Desc'] = $product->Content->Des;                        $product_row['Details'] = $product->Content->Content;                    }                    $product_row['Img'] = static::URL . $product->Content->Img;                    //Get Product Price Based On Extra Fields                    $extra_fields = ProductExtraFields::findFirst(["item_id={$product_row['ID']} AND module_id={$Module_ID}"]);                    if (!$extra_fields) {                        $product_row['Price'] = 0;                    } else {                        $product_row['Price'] = (int)$extra_fields->price;                    }                    $data['Products'][] = $product_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                //header("Content-type:application/json");                echo json_encode($arr);                break;            case "UserOrders":                $arr = array();                $data = array();                //get all orders                $Module_ID = 1;                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $orders = \DataCmsOrders::find(["Module_ID={$Module_ID} AND User_ID={$user_id} AND Status!=2"]);                if (count($orders) < 1) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no orders at this time';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                foreach ($orders as $order) {                    $data_row['ID'] = $order->ID;                    $data_row['User_ID'] = $order->User_ID;                    $data_row['Order_Status'] = $order->Status;                    if (!$order->OrderStatus->getLang(["Lang_ID={$lang_id}"])) {                        $data_row['Order_Status_Name'] = $order->OrderStatus->display_name;                    } else {                        $data_row['Order_Status_Name'] = $order->OrderStatus->display_name_ar;                    }                    $data_row['Order_Delivery_Time'] = "30";                    $data_row['Expected_Delivery'] = "30";                    if ($lang_id = 1) {                        $data_row["Payment_Method"] = "الدفع عند الاستلام";                    } else {                        $data_row["Payment_Method"] = "Cash On Delivery";                    }                    $data_row['Total_Price'] = 0;                    $data_row['Order_Delivery_Date'] = date("m/d/Y", $order->Date);                    //$data_row['Address'] = $this->getAddress($order->Address->id);                    foreach ($order->getOrderPurchase(["item_type_id=1"]) as $order_info) {                        $data_product = array();                        $data_product['ID'] = $order_info->Data_Cms_ID;                        $data_product['Count'] = $order_info->Count;                        $langs = $order_info->Content->getLang(["lang_id={$lang_id}"]);                        if (count($langs) > 0) {                            foreach ($langs as $lang) {                                $data_product['Title'] = $lang->title;                            }                        } else {                            $data_product['Title'] = $order_info->Content->Title;                        }                        $data_product['Price'] = $order_info->Cost;                        $data_row['Products'][] = $data_product;                        $data_row['Total_Price'] = $data_row['Total_Price'] + $order_info->Cost;                    }                    $data[] = $data_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Product":                $arr = array();                $data = array();                $Module_ID = 8;                if (!isset($_REQUEST['Product_ID'])) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'Product_ID is not set';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $product_id = $_REQUEST['Product_ID'];                $product = Content::findFirst(["Module_ID={$Module_ID} AND ID={$product_id}"]);                if (!$product) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'Ther is no matching product';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $product_row = array();                $product_row['ID'] = $product->ID;                $langs = $product->getLang(["lang_id={$lang_id}"]);                if (count($langs) > 0) {                    foreach ($langs as $lang) {                        $product_row['Title'] = $lang->title;                        $product_row['Desc'] = $lang->des;                        $product_row['Details'] = strip_tags($lang->content);                    }                } else {                    $product_row['Title'] = $product->Title;                    $product_row['Desc'] = $product->Des;                    $product_row['Details'] = strip_tags($product->Content);                }                $product_row['Img'] = static::URL . $product->Img;                //Get Product Price Based On Extra Fields                $extra_fields = ProductExtraFields::findFirst(["item_id={$product_row['ID']} AND module_id={$Module_ID}"]);                if (!$extra_fields) {                    $product_row['Price'] = 0;                } else {                    $product_row['Price'] = (int)$extra_fields->price;                }                //Get Keyvalue Dynamically And Append it Dynamically to Content Details                $keyvalues = $this->apiFactory->structureCMSResponse(200, [$product], 2, $lang_id);                $content_string = "";                $keyvalues_array = $keyvalues['content'][0]['more'];                foreach ($keyvalues_array as $k => $v) {                    if ($k > 0) {                        break;                    }                    foreach ($v['value'] as $kv) {                        $kv_title = $kv['name'];                        foreach ($kv['value'] as $item ){                            $kv_value = $item['value_title'];                        }                        $kv_formatted = $kv_title . " : " . $kv_value . ",";                        $content_string .= $kv_formatted;                    }                    //keyvalue                }                $product_row['Details'] = $product_row['Details']."<br>".$content_string;                $data[] = $product_row;                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $product_row;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Order":                $arr = array();                $data = array();                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                //get specific order                if (!isset($_GET['Order_ID'])) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'Order_ID is not set';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $order_id = $this->request->getQuery("Order_ID");                $orders = \DataCmsOrders::find(["ID={$order_id} AND User_ID={$user_id}"]);                if (!$orders) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no matching order';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                foreach ($orders as $order) {                    $data_row['ID'] = $order->ID;                    $data_row['User_ID'] = $order->User_ID;                    $data_row['Order_Status'] = $order->Status;                    if ($lang_id==1) {                        $data_row['Order_Status_Name'] = $order->OrderStatus->display_name_ar;                    } else {                        $data_row['Order_Status_Name'] = $order->OrderStatus->display_name;                    }                    //$data_row['Address'] = $this->getAddress($order->Address->id);                    $data_row['Total_Price'] = 0;                    $data_row['Delivery'] = 30;                    $data_row['Order_Delivery_Time'] = "30";                    $data_row['Expected_Delivery'] = "30";                    if ($lang_id = 1) {                        $data_row["Payment_Method"] = "الدفع عند الاستلام";                    } else {                        $data_row["Payment_Method"] = "Cash On Delivery";                    }                    foreach ($order->getOrderPurchase(["item_type_id=1"]) as $order_info) {                        $data_product = array();                        $data_product['ID'] = $order_info->item_id;                        $data_product['Count'] = $order_info->Count;                        $langs = $order_info->Content->getLang(["lang_id={$lang_id}"]);                        if (count($langs) > 0) {                            foreach ($langs as $lang) {                                $data_product['Title'] = $lang->title;                                $data_product['Desc'] = $lang->des;                            }                        } else {                            $data_product['Title'] = $order_info->Content->Title;                            $data_product['Desc'] = $order_info->Content->Des;                        }                        $data_product['Price'] = $order_info->Cost;                        $data_product['Img'] = static::URL . $order_info->Content->Img;                        $data_row['Products'][] = $data_product;                        $data_row['Total_Price'] = $data_row['Total_Price'] + $order_info->Cost;                    }                    foreach ($order->getOrderPurchase(["item_type_id=2"]) as $order_info) {                        $product = Offers::findFirst(["id={$order_info->item_id}"]);                        if (!$product) {continue;}                        $data_product = array();                        $data_product['ID'] = $order_info->item_id;                        $data_product['Count'] = $order_info->Count;                        $data_product['Title'] = $product->name;                        $data_product['Desc'] = $product->description;                        $data_product['Img'] = static::URL . $product->image;                        $data_product['Price'] = $order_info->Cost;                        $data_row['Products'][] = $data_product;                        $data_row['Total_Price'] = $data_row['Total_Price'] + $order_info->Cost;                    }                    $data[] = $data_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data_row;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "User":                $arr = array();                $data = array();                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $user = UsersMobile::findFirst(["ID={$user_id} AND Application_ID=" . static::APPLICATION_ID]);                if (!$user) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'User Not Found';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $data_row['ID'] = $user->ID;                $data_row['UserName'] = $user->User;                $data_row['name'] = $user->Title;                $data_row['Mobile'] = $user->Mobile;                $data_row['E-Mail'] = $user->Mail;                $data_row['Pass_Hash'] = $user->Pass;                $data_row['Gender'] = $user->Gender;                $data_row['ShippingAddresses'] = array();                foreach ($user->shippingAddresses as $address) {                    $data_address['id'] = $address->id;                    $data_address['details'] = $address->details;                    $data_address['country_id'] = $address->country_id;                    $data_address['region_id'] = $address->region_id;                    $data_address['postal_code'] = $address->postal_code;                    $data_address['city_id'] = $address->city_id;                    $data_address['is_main'] = $address->is_main;                    $data_row['ShippingAddresses'][] = $data_address;                }                $data[] = $data_row;                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "EditProfile":                $arr = array();                $data = array();                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $name = $this->request->get("name");                $mobile = $this->request->getQuery("Mobile");                $user = UsersMobile::findFirst(["ID={$user_id}"]);                $user->Mobile = $mobile;                $user->Title = $name;                if (!$user->save()) {                    $arr['ErrorCode'] = 1;                    $arr['Message'] = implode(",", $user->getMessages());;                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $user->save();                $arr['ErrorCode'] = 200;                $arr['Message'] = "Saving Done";                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "CheckLogin":                $arr = array();                $data = array();                $user_name = $this->request->get("User");                $pass = $this->request->get("Pass");                $user = UsersMobile::findFirst(["User='" . $user_name . "' AND Application_ID=" . static::APPLICATION_ID]);                if (!$user) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'User Not Found';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                if (!$this->security->checkHash($pass, $user->Pass)) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'Password is wrong';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $this->session->set('rom-identity', [                    'id' => $user->ID,                    'name' => $user->Title,                    'Application_Route' => 0,                    'Application_ID' => static::APPLICATION_ID,                ]);                $data['ID'] = $user->ID;                $data['Name'] = $user->Title;                $data['UserName'] = $user->User;                $data['E-Mail'] = $user->Mail;                $data['Mobile'] = $user->Mobile;                $data_row['ShippingAddresses']=[];                foreach ($user->shippingAddresses as $address) {                    $data_address['id'] = $address->id;                    $data_address['details'] = $address->details;                    $data_address['country_id'] = $address->country_id;                    $data_address['region_id'] = $address->region_id;                    $data_address['postal_code'] = $address->postal_code;                    $data_address['city_id'] = $address->city_id;                    $data_address['is_main'] = $address->is_main;                    $data_row['ShippingAddresses'][] = $data_address;                }                $data['Addresses'] = $data_row['ShippingAddresses'];                $data['Session_ID'] = "PHPSESSID=" . $this->session->getId();                $arr['ErrorCode'] = 200;                $arr['Message'] = "Login Successfully";                $arr['Response'] = $data;               // header("Content-type:application/json");                echo json_encode($arr);                break;            case "Register_Token":                $arr = array();                $data = array();                $token = $this->request->getQuery("Token");                $type = $this->request->getQuery("Type");                $user_token = \UsersToken::findFirst(["Token='" . $token . "'"]);                if ($user_token) {                    $Token_ID = $user_token->ID;                    $bool = false;                    $arr['ErrorCode'] = 200;                    $arr['Message'] = "true";                    $data['accessToken'] = $user_token->Token;                    $data['tokenType'] = $user_token->Type;                    $data['userName'] = $user_token->User->User;                    $data['issueDate'] = "issueDate";                    $data['expiryDate'] = "expiryDate";                    $data['expiresIn'] = "expiresIn";                    $arr['Response'] = $data;                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $arr['ErrorCode'] = 409;                $arr['Message'] = 'Error';                $arr['Response'] = '';                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Cities":                $arr = array();                $data = array();                //$module_id = 20172;                $country_id = 1;                $cities = GeoCitiesLang::find(["lang_id={$lang_id}"]);                if (count($cities) < 0) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no Cities';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                foreach ($cities as $city) {                    $data_row = array();                    $data_row['ID'] = $city->city_id;                    $data_row['Name'] = $city->name;                    $data_row['Areas'] = array();//                    foreach ($city->DeptsContent as $content) {////                        $area['ID'] = $content->Item_ID;////                        $area['Name'] = $content->Content->Title;////                        $data_row['Areas'][] = $area;////                    }                    $data[] = $data_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "1";                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "AddAddress":                $arr = array();                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $data_address['details'] = $this->request->get("details");                $data_address['country_id'] = $this->request->get("country_id");                $data_address['region_id'] = $this->request->get("region_id");                $data_address['postal_code'] = $this->request->get("postal_code");                $data_address['city_id'] = $this->request->get("city_id");                $data_address['is_main'] = 0;                $address = new UserAddresses();                $address->details = $data_address['details'];                $address->country_id = $data_address['country_id'];                $address->region_id = $data_address['region_id'];                $address->postal_code = $data_address['postal_code'];                $address->city_id = $data_address['city_id'];                $address->user_id = $user_id;                if (!$address->save()) {                    $arr['ErrorCode'] = 1;                    $arr['Message'] = implode(",", $address->getMessages());                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $data = $address->toArray();                $arr['ErrorCode'] = 200;                $arr['Message'] = "Address Created";                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "getAddress":                $arr = array();                $data = array();                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $address_id = $this->request->getQuery("address_id");                $address = UserAddresses::findFirst(["user_id={$user_id} AND id={$address_id}"]);                if (!$address) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no matching address';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $data_address['id'] = $address->id;                $data_address['details'] = $address->details;                $data_address['country_id'] = $address->country_id;                $data_address['region_id'] = $address->region_id;                $data_address['postal_code'] = $address->postal_code;                $data_address['city_id'] = $address->city_id;                $data_address['is_main'] = $address->is_main;                //$data[] = $data_address;                $arr['ErrorCode'] = 200;                $arr['Message'] = "1";                $arr['Response'] = $data_address;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "EditAddress":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $address_id = $this->request->get("Address_ID");                if (!$address_id) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'address_id is not set';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $address = UserAddresses::findFirst(["user_id={$user->ID} AND id={$address_id} "]);                if (!$address) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'Address Is Not Found';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $arr = array();                $address->details = $this->request->get("details") ?: $address->details;                $address->country_id = $this->request->get("country_id") ?: $address->country_id;                $address->region_id = $this->request->get("region_id") ?: $address->region_id;                $address->city_id  = $this->request->get("city_id") ?: $address->city_id;                $address->postal_code  = $this->request->get("postal_code") ?: $address->postal_code;                if (!$address->save()) {                    $arr['ErrorCode'] = 1;                    $arr['Message'] = implode(",", $address->getMessages());;                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $data = $address->toArray();                $arr['ErrorCode'] = 200;                $arr['Message'] = "Address Saved Successfully";                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "RemoveAddress":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $address_id = $this->request->get("address_id");                if (!$address_id) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'address_id is not set';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $address = UserAddresses::findFirst(["user_id={$user->ID} AND id={$address_id} "]);                if (!$address) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'Address Is Not Found';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $address->delete();                $arr['ErrorCode'] = 200;                $arr['Message'] = 'Address Has Been Deleted Successfully';                $arr['Response'] = '';                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Register_Account":                $arr = array();                $data = array();                $Module_ID = 20171;                $required_fields = ["Email", "Phone", "Pass", "Gender", "user_name","name",                "details","postal_code","country_id","region_id","city_id"                ];                $not_found = [];                foreach ($required_fields as $value) {                    if (!isset($_REQUEST[$value])) {                        $not_found[] = $value;                    }                }                if (count($not_found) > 0) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "Check All Paramters is Sent: " . implode(",", $not_found);                    $arr['Response'] = [];                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $mail = $this->request->get("Email");                //check if e-mail exists in the same app                $check_user = UsersMobile::findFirst(["Mail='{$mail}' AND Application_ID=" . static::APPLICATION_ID]);                if ($check_user) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "User Exists With the Same E-Mail";                    $arr['Response'] = [];                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $mobile = $this->request->get("Phone");                $check_user = UsersMobile::findFirst(["Mobile='{$mobile}' AND Application_ID=" . static::APPLICATION_ID]);                if ($check_user) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "User Exists With the Same Mobile";                    $arr['Response'] = [];                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $pass = $this->request->get("Pass");                $mobile = $this->request->get("Phone");                $gender = $this->request->get("Gender");                $date_birth = $this->request->get("DateOfBirth") ?: "";                $name = $this->request->get("name");                $user_name = $this->request->get("user_name");                $details = $this->request->get("details");                $postal_code = $this->request->get("postal_code");                $country_id = $this->request->get("country_id");                $city_id = $this->request->get("city_id");                $region_id = $this->request->get("region_id");                $user = new UsersMobile();                $user->Mail = $mail;                $user->Pass = $this->security->hash($pass);                $user->Mobile = $mobile;                $user->Gender = $gender;                $user->Application_ID = static::APPLICATION_ID;                $user->Title = $mail;                $user->Module_ID = $Module_ID;                $user->User = $user_name;                $user->Title = $name;                if (!$user->save()) {                    $arr['ErrorCode'] = 1;                    $arr['Message'] = implode(",", $user->getMessages());                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                //Create Shiiping Address                $address = new UserAddresses();                $address->details = $details;                $address->city_id = $city_id;                $address->country_id = $country_id;                $address->postal_code = $postal_code;                $address->region_id = $region_id;                $address->is_main =0 ;                $address->user_id = $user->ID;                $address->save();                $data_row['ID'] = $user->ID;                $data_row['Mail'] = $user->Mail;                $data_row['Address_ID'] = $address->id;                $data[] = $data_row;                $arr['ErrorCode'] = 200;                $arr['Message'] = "User Created Successfully";                $arr['Response'] = $data_row;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "AddToCart":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                // Try Cart With the new module For Tanks Project                $Module_ID = 20171;                $product_id = $this->request->get("product");                $count = $this->request->get("count");                $user_id = $this->request->get("user");                if ($user_id !== $user->ID) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'Please Login With The Same User';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $add_to_cart_url = $this->url_shared->get("cart_module/apis/addToCart/").$user_id;                $client = new Client(['base_uri' => "{$add_to_cart_url}"]);                $request = new GuzzReq('GET',"");                $response = $client->send($request, ['timeout' => 20]);                $body = $response->getBody();                $x=json_decode($body);                die();                $existing_cart = \DataCmsOrders::findFirst(["Status = 7 AND User_ID={$user_id}"]);                if (!$existing_cart) {                    $cart = new \DataCmsOrders();                    $cart->User_ID = $user_id;                    $cart->Date = time();                    $cart->Application_ID = static::APPLICATION_ID;                    $cart->Module_ID = $Module_ID;                    $cart->Status = 7;                    $cart->save();                    $cart_id = $cart->ID;                } else {                    $cart_id = $existing_cart->ID;                }                //check if the product already is in the current cart                $order_details = \DataCmsOrdersPurchase::findFirst(["Orders_ID={$cart_id} AND Data_Cms_ID={$product_id}"]);                if (!$order_details) {                    $order_details = new \DataCmsOrdersPurchase();                    $order_details->Orders_ID = $cart_id;                    $order_details->Data_Cms_ID = $product_id;                    $order_details->Count = $count;                    $order_details->Application_ID = static::APPLICATION_ID;;                    $order_details->Module_ID = $Module_ID;                    $order_details->Date = time();                    //get product price                    $item = Content::findFirst(["ID={$product_id}"]);                    if ($item->Module_ID == 20171) {                        $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=40"]);                        $order_details->Cost = $count * $price->Value;                        $order_details->save();                    } //   if product is a deal                    elseif ($item->Module_ID == 20180) {                        $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=50"]);                        $order_details->Cost = $count * $price->Value;                        $order_details->save();                    }                    $arr['ErrorCode'] = 200;                    $arr['Message'] = "Product Added to cart successfully";                    $arr['Response'] = "Success";                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                // if exists in the cart                $order_details->Count = $order_details->Count + $count;                //get product price                $item = Content::findFirst(["ID={$product_id}"]);                if ($item->Module_ID == 20171) {                    $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=40"]);                    $order_details->Cost = $count * $price->Value;                    $order_details->save();                } //   if product is a deal                elseif ($item->Module_ID == 20180) {                    $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=50"]);                    $order_details->Cost = $count * $price->Value;                    $order_details->save();                }                $order_details->Cost = $order_details->Count * $price->Value;                $order_details->save();                $arr['ErrorCode'] = 200;                $arr['Message'] = "Product Updated to cart successfully";                $arr['Response'] = "Success";                header("Content-type:application/json");                echo json_encode($arr);                break;            case "RemoveFromCart":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $product_id = $this->request->getQuery("Product_ID");                $existing_cart = \DataCmsOrders::findFirst(["Status = 7 AND User_ID={$user_id}"]);                $cart_id = $existing_cart->ID;                $order_details = \DataCmsOrdersPurchase::findFirst(["Orders_ID={$cart_id} AND Data_Cms_ID={$product_id}"]);                $order_details->delete();                //check if the cart has other products, if not delete the cart                $check_cart = \DataCmsOrdersPurchase::find(["Orders_ID={$cart_id}"]);                if (count($check_cart) < 1) {                    $existing_cart->delete();                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 'Product Has Been Removed From The Cart';                $arr['Response'] = 'Success';                header("Content-type:application/json");                echo json_encode($arr);                return;                break;            case "ViewCart":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                ////////                $Module_ID = 20171;                $user_id = $user->ID;                $existing_cart = \DataCmsOrders::findFirst(["Status = 7 AND User_ID={$user_id}"]);                if (!$existing_cart) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "Cart is Empty";                    $arr['Response'] = [];                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $order_details = \DataCmsOrdersPurchase::find(["Orders_ID={$existing_cart->ID}"]);                $cart = array();                $cart["Total_Price"] = 0;                foreach ($order_details as $order_detail) {                    $product = array();                    $product["ID"] = $order_detail->Content->ID;                    $langs = $order_detail->Content->getLang(["lang_id={$lang_id}"]);                    if (count($langs) > 0) {                        foreach ($langs as $lang) {                            $product["Title"] = $lang->title;                        }                    } else {                        $product["Title"] = $order_detail->Content->Title;                    }                    $product["Img"] = static::URL . $order_detail->Content->Img;                    $product["Count"] = $order_detail->Count;                    $product_id = $order_detail->Data_Cms_ID;                    //get product price                    $item = Content::findFirst(["ID={$product_id}"]);                    if ($item->Module_ID == 20171) {                        $product["Price"] = 0;                        $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=40"]);                        if ($price) {                            $product["Price"] = $price->Value;                        }                    } //   if product is a deal                    elseif ($item->Module_ID == 20180) {                        $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=50"]);                        $product["Price"] = $price->Value;                    }                    $product["Count_Price"] = $order_detail->Cost;                    $cart["Products"][] = $product;                    $cart["Total_Price"] = $cart["Total_Price"] + $order_detail->Cost;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "Success";                $arr['Response'] = $cart;                //print_r($arr);                header("Content-type:application/json");                echo json_encode($arr);                break;            //Start Checkout Process When Clicking Checkout in View Cart (Get Order With Status 7)            case "CheckOut":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $order = \DataCmsOrders::findFirst("User_ID={$user_id} AND Status=7");                if (!$order) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "There is no order,Cart is Empty";                    $arr['Response'] = "";                    //print_r($arr);                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $checkout = array();                $Total_Cost = 0;                foreach ($order->OrderPurchase as $purchase) {                    $Total_Cost = $Total_Cost + $purchase->Cost;                }                $checkout["Total_Cost"] = $Total_Cost;                $checkout["Addresses"] = array();                //getting shipping addresses                $addresses = \UsersShippingAddresses::find(["user_id={$user_id}"]);                foreach ($addresses as $address) {                    $data_row['Address_ID'] = $address->id;                    $data_row['Name'] = $address->address_name;                    $checkout["Addresses"][] = $data_row;                }                if ($lang_id = 1) {                    $checkout["Payment_Method"] = "الدفع عند الاستلام";                } else {                    $checkout["Payment_Method"] = "Cash On Delivery";                }                $checkout["Delivery_Time"] = 30;                $arr['ErrorCode'] = 200;                $arr['Message'] = "Success";                $arr['Response'] = $checkout;                //print_r($arr);                header("Content-type:application/json");                echo json_encode($arr);                break;            //Checkout Confirm Action            case "CheckOutConfirm":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $order = \DataCmsOrders::findFirst("User_ID={$user_id} AND Status=7");                if (!$order) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "There is no order,Cart is Empty";                    $arr['Response'] = "";                    //print_r($arr);                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                ////////                // Check for a the address                if (!isset($_REQUEST['address'])) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'address parameter is not set';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $address_id = $this->request->getQuery("address");                $delivery = "Now";                $order->Address_ID = $address_id;                $order->save();                $order_id = $order->ID;                $address = \UsersShippingAddresses::findFirst("id={$address_id}");                if (!$address) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'address is not found by this id';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $order_details = \DataCmsOrdersPurchase::find(["Orders_ID={$order_id}"]);                $cart = array();                $cart["Total_Price"] = 0;                $cart["Address"][] = ["Address_ID" => $address->id, "Address_Name" => $address->address_name];                $cart["Delivery"] = $delivery;                foreach ($order_details as $order_detail) {                    $product = array();                    $langs = $order_detail->Content->getLang(["lang_id={$lang_id}"]);                    if (count($langs) > 0) {                        foreach ($langs as $lang) {                            $product["Title"] = $lang->title;                        }                    } else {                        $product["Title"] = $order_detail->Content->Title;                    }                    $product["Img"] = static::URL . $order_detail->Content->Img;                    $product["Count"] = $order_detail->Count;                    $product_id = $order_detail->Data_Cms_ID;                    //get product price                    $item = Content::findFirst(["ID={$product_id}"]);                    if ($item->Module_ID == 20171) {                        $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=40"]);                        $product["Price"] = $price->Value;                    } //   if product is a deal                    elseif ($item->Module_ID == 20180) {                        $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=50"]);                        $product["Count_Price"] = $price->Value;                    }                    $product["Count_Price"] = $order_detail->Cost;                    $cart["Products"][] = $product;                    $cart["Total_Price"] = $cart["Total_Price"] + $order_detail->Cost;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "Success";                $arr['Response'] = $cart;                //print_r($arr);                header("Content-type:application/json");                echo json_encode($arr);                break;            // Last Checkout process Order Now            case "CheckOutProcess":                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $order = \DataCmsOrders::findFirst("User_ID={$user_id} AND Status=7");                if (!$order) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "There is no order,Cart is Empty";                    $arr['Response'] = "";                    //print_r($arr);                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                ////////                $order_id = $order->ID;                $order = \DataCmsOrders::findFirst("ID={$order_id} AND Status=7");                $order->Status = 1;                $order->save();                $arr['ErrorCode'] = 200;                $arr['Message'] = "Checkout was done successfully";                $arr['Response'] = "Success";                //print_r($arr);                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Search":                $q = $this->request->getQuery("q");                if ($lang_id == 1) {                    $search = Content::find(["Title like '%" . $q . "%' AND Module_ID=8                                 "]);                    if (count($search) < 1) {                        $arr['ErrorCode'] = 204;                        $arr['Message'] = "There is no matching item";                        $arr['Response'] = "Empty";                        header("Content-type:application/json");                        echo json_encode($arr);                        break;                    }                    $data = array();                    foreach ($search as $item) {                        $data_row["ID"] = $item->ID;                        $data_row["Title"] = $item->Title;                        $data_row['Desc'] = $item->Des;                        $data_row['Details'] = $item->Content;                        $data_row['Img'] = static::URL . $item->Img;                        $extra_fields = ProductExtraFields::findFirst(["item_id={$data_row['ID']} AND module_id=8"]);                        if (!$extra_fields) {                            $data_row['Price'] = 0;                        } else {                            $data_row['Price'] = (int)$extra_fields->price;                        }                        $data[] = $data_row;                    }                } else {                    $getContent = Content::find(["Module_ID=8"]);                    $data = array();                    foreach ($getContent as $filter) {                        $search = $filter->getLang(["lang_id={$lang_id} AND title like '%" . $q . "%'"]);                        if (count($search) < 1) {                            $arr['ErrorCode'] = 204;                            $arr['Message'] = "There is no matching item ";                            $arr['Response'] = "Empty";                            header("Content-type:application/json");                            echo json_encode($arr);                            break;                        }                        foreach ($search as $item) {                            $data_row["ID"] = $item->Content->ID;                            $data_row["Title"] = $item->title;                            $data_row['Desc'] = $item->des;                            //$data_row['Details']=$item->content;                            $data_row['Img'] = static::URL . $item->Content->Img;                            $extra_fields = ProductExtraFields::findFirst(["item_id={$data_row['ID']} AND module_id=8"]);                            if (!$extra_fields) {                                $data_row['Price'] = 0;                            } else {                                $data_row['Price'] = (int)$extra_fields->price;                            }                            $data[] = $data_row;                        }                    }                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "Success";                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Deals":                //Get Offers From the new Offers Module                $arr = array();                $data = array();                $Module_ID = 8;                $offers = Offers::find();                if (count($offers) < 1) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no deals at this time';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                foreach ($offers as $offer) {                    $offer_row = array();                    $offer_row['ID'] = $offer->id;                    $offer_row['Title'] = $offer->name;                    $offer_row['Desc'] = $offer->description;                    $offer_row['Details'] = $offer->description;                    $offer_row['Img'] = static::URL . $offer->image;                    $offer_row['Price_Before'] = $offer->price; // There is no before price in the new module                    $offer_row['Deal_Price'] = $offer->price;                    $data['Products'][] = $offer_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "New":                // Get Product in Category                $arr = array();                $data = array();                $date = time();                $date_from_two_weeks = strtotime("-2 week");                $products = Content::find(["DateTime >= '{$date_from_two_weeks}' AND Module_ID=20171 "]);                if (count($products) < 1) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no new items at this time';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                foreach ($products as $product) {                    $product_row = array();                    $product_row['ID'] = $product->ID;                    $langs = $product->getLang(["lang_id={$lang_id}"]);                    if (count($langs) > 0) {                        foreach ($langs as $lang) {                            $product_row['Title'] = $lang->title;                            $product_row['Desc'] = $lang->des;                            $product_row['Details'] = $lang->content;                        }                    } else {                        $product_row['Title'] = $product->Title;                        $product_row['Desc'] = $product->Des;                        $product_row['Details'] = $product->Content;                    }                    $product_row['Img'] = static::URL . $product->Img;                    if ($product->Module_ID == 20180) {                        foreach ($product->DataKeyvalueUserdata as $keyvalue) {                            if ($keyvalue->DKV_ID == 51) {                                $product_row['Price_Before'] = $keyvalue->Value;                            }                            if ($keyvalue->DKV_ID == 50) {                                $product_row['Deal_Price'] = $keyvalue->Value;                            }                        }                    } else {                        foreach ($product->DataKeyvalueUserdata as $keyvalue) {                            if ($keyvalue->DKV_ID == 40) {                                $product_row['Price'] = $keyvalue->Value;                            }                        }                    }                    $data['Products'][] = $product_row;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Contact":                $content = Content::findFirst(["ID=44"]);                $data["content"]= $content->Content;                foreach ($content->DataKeyvalueUserdata as $kv){                    switch ($kv->DKV_ID){                        case 83:                            $data["email"]=$kv->Value;                            break;                        case 84:                            $data["mobile1"]=$kv->Value;                            break;                        case 85:                            $data["mobile2"]=$kv->Value;                            break;                        case 86:                            $data["address"]=$kv->Value;                            break;                        case 87:                            $data["fax"]=$kv->Value;                            break;                    }                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "Success";                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "About":                $About = Content::find(["ID=2 AND Module_ID=2"]);                $data = [];                foreach ($About as $info) {                    if ($info->ID == 2) {                        $langs = $info->getLang(["lang_id={$lang_id}"]);                        if (count($langs) > 0) {                            foreach ($langs as $lang) {                                $data_row['Info'] = strip_tags($lang->content);                            }                        } else {                            $data_row['Info'] = strip_tags($info->Content);                        }                    }                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 'Success';                $arr['Response'] = $data_row;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "ChangePassword":                $arr = [];                //check logged in                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $old_pass = $this->request->getQuery("Pass");                $new_pass = $this->request->getQuery("New");                $confirm_pass = $this->request->getQuery("Confirm");                if (!$this->security->checkHash($old_pass, $user->Pass)) {                    $arr['ErrorCode'] = 4011;                    $arr['Message'] = 'Check your old password';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                if (strlen($new_pass) < 8) {                    $arr['ErrorCode'] = 4012;                    $arr['Message'] = 'Password Must Be At Least 8 Characters';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                if ($new_pass !== $confirm_pass) {                    $arr['ErrorCode'] = 4013;                    $arr['Message'] = 'Check that the new password are the same as the confirmation password';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user->Pass = $this->security->hash($new_pass);                if (!$user->save()) {                    $arr['ErrorCode'] = 1;                    $arr['Message'] = implode(",", $user->getMessages());                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "Password Has been changed sucessfully";                header("Content-type:application/json");                echo json_encode($arr);                break;            case "ForgetPassword":                $arr = [];                $mail = $this->request->get("Mail");                $user = $this->checkUserByMail($mail);                if ($user == false) {                    $arr['ErrorCode'] = 4014;                    $arr['Message'] = "E-Mail is Not registered";                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $resetPassword = new ResetPasswords();                $resetPassword->usersId = $user->ID;                if (!$resetPassword->save()) {                    return;                }                //send reset link                $this->sendResetPassLink($resetPassword);                $arr['ErrorCode'] = 200;                $arr['Message'] = "Check Your Mail";                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Barcode_Search":                $code = $this->request->getQuery("Code");                $product = \DataKeyvalueUserdata::findFirst(["DKV_ID=63 AND Value='{$code}'"]);                if (!$product) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = "There is no matching item";                    $arr['Response'] = "Empty";                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $product_row['ID'] = $product->Content->ID;                $langs = $product->Content->getLang(["lang_id={$lang_id}"]);                if (count($langs) > 0) {                    foreach ($langs as $lang) {                        $product_row['Title'] = $lang->title;                        $product_row['Desc'] = $lang->des;                        $product_row['Details'] = $lang->content;                    }                } else {                    $product_row['Title'] = $product->Content->Title;                    $product_row['Desc'] = $product->Content->Des;                    $product_row['Details'] = $product->Content->Content;                }                $product_row['Img'] = static::URL . $product->Content->Img;                if ($product->Module_ID == 20180) {                    foreach ($product->Content->DataKeyvalueUserdata as $keyvalue) {                        if ($keyvalue->DKV_ID == 51) {                            $product_row['Price_Before'] = $keyvalue->Value;                        }                        if ($keyvalue->DKV_ID == 50) {                            $product_row['Deal_Price'] = $keyvalue->Value;                        }                    }                } else {                    foreach ($product->Content->DataKeyvalueUserdata as $keyvalue) {                        if ($keyvalue->DKV_ID == 40) {                            $product_row['Price'] = $keyvalue->Value;                        }                    }                }                $arr['ErrorCode'] = 200;                $arr['Message'] = "Success";                $arr['Response'] = $product_row;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "Deal_Details":                //Get Offer From the new Offers Module                $arr = array();                $data = array();                $Module_ID = 8;                if (!isset($_REQUEST['Product_ID'])) {                    $arr['ErrorCode'] = 422;                    $arr['Message'] = 'Product_ID is not set';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $product_id = $_REQUEST['Product_ID'];                $product = Offers::findFirst(["id={$product_id}"]);                if (!$product) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'Ther is no matching product';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    break;                }                $product_row = array();                $product_row['ID'] = $product->id;                $product_row['Title'] = $product->name;                $product_row['Desc'] = $product->description;                $product_row['Details'] = $product->description;                $product_row['Img'] = static::URL . $product->image;                $product_row['Price_Before'] = $product->price;                $product_row['Deal_Price'] = $product->price;                $data[] = $product_row;                $arr['ErrorCode'] = 200;                $arr['Message'] = 1;                $arr['Response'] = $product_row;                header("Content-type:application/json");                echo json_encode($arr);                break;            case "RemoveOneFromCart";                $user = $this->checkUserLoggedin();                if (!$user) {                    $arr['ErrorCode'] = 401;                    $arr['Message'] = 'you are not logged in';                    $arr['Response'] = '0';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                $user_id = $user->ID;                $product_id = $this->request->get("Product_ID");                $existing_cart = \DataCmsOrders::findFirst(["Status = 7 AND User_ID={$user_id}"]);                $cart_id = $existing_cart->ID;                $order_details = \DataCmsOrdersPurchase::findFirst(["Orders_ID={$cart_id} AND Data_Cms_ID={$product_id}"]);                if (!$order_details) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'The product is not added to the cart';                    $arr['Response'] = '';                    header("Content-type:application/json");                    echo json_encode($arr);                    return;                }                //Get Product Price                $item = Content::findFirst(["ID={$product_id}"]);                if ($item->Module_ID == 20171) {                    $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=40"]);                    $order_details->Cost = $order_details->Cost - $price->Value;                    $order_details->Count--;                    $order_details->save();                    if ($order_details->Count == 0) {                        $order_details->delete();                        //check if the cart has other products, if not delete the cart                        $check_cart = \DataCmsOrdersPurchase::find(["Orders_ID={$cart_id}"]);                        if (count($check_cart) < 1) {                            $existing_cart->delete();                        }                    }                } //   if product is a deal                elseif ($item->Module_ID == 20180) {                    $price = \DataKeyvalueUserdata::findFirst(["Item_ID={$product_id} AND DKV_ID=50"]);                    $order_details->Cost = $order_details->Cost - $price->Value;                    $order_details->Count--;                    $order_details->save();                    if ($order_details->Count == 0) {                        $order_details->delete();                        //check if the cart has other products, if not delete the cart                        $check_cart = \DataCmsOrdersPurchase::find(["Orders_ID={$cart_id}"]);                        if (count($check_cart) < 1) {                            $existing_cart->delete();                        }                    }                }                $arr['ErrorCode'] = 200;                $arr['Message'] = 'Quantity Decreased';                $arr['Response'] = 'Success';                header("Content-type:application/json");                echo json_encode($arr);                return;                break;            case "Not": //Notifications                $content = Content::find(["Module_ID=20210", "order" => "ID DESC"]);                if (count($content) == 0) {                    $arr['ErrorCode'] = 204;                    $arr['Message'] = 'There is no data';                    $arr['Response'] = "";                    header("Content-type:application/json");                    echo json_encode($arr);                }                $data = [];                foreach ($content as $item) {                    $row = [];                    $row["Title"] = $item->Title;                    $row["Des"] = strip_tags($item->Des);                    $row["Img"] = static::URL . $item->Img;                    $row["Date"] = time();                    $data[] = $row;                }                $arr['Status'] = 200;                $arr['Message'] = 'Success';                $arr['Response'] = $data;                header("Content-type:application/json");                echo json_encode($arr);                break;            default:                $arr['Status'] = 400;                $arr['Response'] = 'Bad Request';                header("Content-type:application/json");                echo json_encode($arr);                break;        }    }    public function resetPasswordAction()    {        $this->view->disable();        $code = $this->dispatcher->getParam('code');        $mail = $this->dispatcher->getParam('email');        $app = $this->dispatcher->getParam('app');        $reset = ResetPasswords::findFirst(["code='{$code}'"]);        if (!$reset) {            $arr['ErrorCode'] = 4015;            $arr['Message'] = "Code is Wrong";            header("Content-type:application/json");            echo json_encode($arr);            return;        }        $new_pass = base64_encode(openssl_random_pseudo_bytes(8));        $user = UsersMobile::findFirst(["Mail='{$mail}' AND Application_ID=574"]);        $user->Pass = $this->security->hash($new_pass);        $user->save();        //send the new password        $this->sendNewPass($user, $new_pass);        $arr['ErrorCode'] = 200;        $arr['Message'] = "The NewPass is sent:" . $new_pass;        header("Content-type:application/json");        echo json_encode($arr);        return;    }    public function checkUserLoggedin()    {        $identity = $this->session->get('rom-identity');        if (isset($identity['id'])) {            $user = UsersMobile::findFirst("ID=" . $identity['id']);            if ($user == false) {                return false;            }            return $user;        }        return false;    }    public function checkUserByMail($mail)    {        $user = UsersMobile::findFirst(["Mail='{$mail}' AND Application_ID=" . static::APPLICATION_ID]);        if (!$user) {            return false;        }        return $user;    }    public function sendResetPassLink($reset)    {        $this->getDI()            ->getMail()            ->send([                $reset->user->Mail => $reset->user->Title            ], "Reset your password", 'reset_app', [                'resetUrl' => '/reset-password-app/' . $reset->code . '/' . $reset->user->Mail . '/' . $reset->user->Application_ID            ]);    }    public function sendNewPass($user, $newPass)    {        $this->getDI()            ->getMail()            ->send([                $user->Mail => $user->Title            ], "Your New Password", 'new_pass', [                'newPass' => $newPass            ]);    }    public function getContent($app_id, $module_id)    {        $content = Content::find(["Application_ID={$app_id} AND Module_ID={$module_id}"])->toArray();        return $content;    }    public function getAddress($ID)    {        $address = \UsersShippingAddresses::findFirst(["id={$ID}"]);        $data_address['ID'] = $address->id;        $data_address['AddressName'] = $address->address_name;        $data_address['StreetName'] = $address->street_name;        $data_address['ExtraDirections'] = $address->extra_directions;        $data_address['Type'] = $address->type;        $data_address['BuildingNumber'] = $address->building_number;        $data_address['Floor'] = $address->floor;        $data_address['AppartmentNumber'] = $address->appartment_number;        $data_address['BlockNumber'] = $address->block_number;        $data_address['Area'] = $address->Area->Title;        $data_address['AreaCode'] = $address->Area->ID;        $area_q = \UsersShippingAddresses::findFirst(["id={$ID}"]);        $area = $area_q->Area->Title;        $data_address['Area'] = $area;        return $data_address;    }}